<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DevAxRefreshDataHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DevAxRefreshDataHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>promptConfirmation</Name>
				<Source><![CDATA[
    public static boolean promptConfirmation(str textDialog = "@DevAxRefreshData:RFDTA004")
    {
        DialogButton response = Box::yesNo(textDialog, DialogButton::Yes);

        return response == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentUrlHost</Name>
				<Source><![CDATA[
    public static str getCurrentUrlHost()
    {
        str currentUrl = URLUtility::getUrl();
        str currentUrlHost = new System.Uri(currentUrl).Host;

        return currentUrlHost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductionEnvironment</Name>
				<Source><![CDATA[
    public static boolean isProductionEnvironment()
    {
        DevAxRefreshDataParameters parameters = DevAxRefreshDataParameters::find();

        if (!parameters.UrlD365Prod)
        {
            return error("@DevAxRefreshData:RFDTA006"); // "The D365 Production URL is not configured."
        }

        str currentUrlHost = DevAxRefreshDataHelper::getCurrentUrlHost();
        str urlD365ProdHost = parameters.UrlD365Prod ? new System.Uri(parameters.UrlD365Prod).Host : "";

        return currentUrlHost == urlD365ProdHost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrivateClassMethodXpp</Name>
				<Source><![CDATA[
    public static anytype callPrivateClassMethodXpp(Object _obj, ClassId _classId, str _methodName, boolean _isStaticMethod,
        int _qtyParms, anytype _parm1 = null)
    {
        SysDictClass dictClass = new SysDictClass(_classId);

        anytype ret;
        switch(_qtyParms)
        {
            case 0 :
            ret = _isStaticMethod ? dictClass.callStatic(_methodName) :
                dictClass.callObject(_methodName, _obj);
                dictClass.callObject(_methodName, _obj);
                break;
            case 1 :
            ret = _isStaticMethod ? dictClass.callStatic(_methodName, _parm1) :
                dictClass.callObject(_methodName, _obj, _parm1);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>